# file: playbook.yml
- name: Setup k3d cluster
  hosts:
  - pi_5

  vars:
    dest_path: "{{ lookup('env', 'HOME') }}/workspace"
    k3d_app: "/usr/local/bin/k3d"
    cluster_name: "cluster-pi5"
    cluster_file: "cluster.yml"
    k8s_file: "nginx-svc-deploy.yml"

  become: true
  tasks:
    # enable cgroup memory
    - name: Set cgroup on Raspberry pi 5
      lineinfile:
        path: /boot/firmware/cmdline.txt
        regexp: '^(.*rootwait)$'
        line: '\1 cgroup_memory=1 cgroup_enable=memory'
        backrefs: true
      when: ( ansible_facts.architecture is search "arm" )
      notify:
        - Reboot pi5
    # copy required config files to remote
    - name: ensures destination dir exists
      file: 
        path: "{{ dest_path }}"
        state: directory
    # add files to destination dir
    - name: Copy config files to remote
      copy:
        src: "resources/"
        dest: "{{ dest_path }}"
        force: yes

    # install apt packages
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true
    - name: Install required packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - docker.io
          - docker-compose
          - python3-pip
        state: latest
        update_cache: true
    - name: adding existing user "{{ ansible_user }}" to group sudo
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      become: yes
    # install kubectl if not existing
    - name: Check if kubectl is installed
      stat:
        path: "/usr/local/bin/kubectl"
      register: kubectl
    - name: Download the latest kubectl release
      uri:
        url: "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl"
        dest: "/usr/local/bin/kubectl"
        mode: '0755'
      when: kubectl.stat.exists == False
    # install k3d if not existing
    - name: Check if k3d is installed
      stat:
        path: "{{ k3d_app }}"
      register: k3d
    - name: Install k3d if not existing
      get_url: 
        url: https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh dest=/tmp/k3d-installer.sh
      when: k3d.stat.exists == False
    - name: Install k3d
      shell: /tmp/k3d-installer.sh
      when: k3d.stat.exists == False
    - name: Remove the k3d-installer.sh
      file: 
        path: /tmp/k3d-installer.sh 
        state: absent
    # create k3d cluster if not existing
    - name: Check if k3d cluster is existing
      shell: |
        k3d cluster list | grep -w '{{ cluster_name }}'
      register: k3d_cluster
      failed_when: k3d_cluster.rc != 1 and k3d_cluster.rc != 0
    - name: debug k3d_cluster
      debug:
        msg: "k3d_cluster.rc = {{ k3d_cluster.rc }}"
    - name: Create k3d cluster
      shell:
        cmd: |
          echo "Start creating cluster with config file ..."
          k3d cluster create --config {{ dest_path }}/{{ cluster_file }}
      when: k3d_cluster.rc == 1 # echo $?
    # make sure the kube-config file has content (avoid to get empty file)
    - name: Generate kube-config file
      shell:
        cmd: k3d kubeconfig get --all > {{ lookup('env', 'HOME') }}/.kube/config
      when: k3d_cluster.rc == 1
    - name: Pause for 10 seconds for service start
      pause:
        seconds: 10
      when: k3d_cluster.rc == 1
    # create nginx as loadbalance
    - name: Create nginx loadbalancer
      shell: |
        kubectl apply -f {{ dest_path }}/{{ k8s_file }}
      register: nginx_service
      failed_when: nginx_service.rc != 1 and nginx_service.rc != 0
      when: k3d_cluster.rc == 1
    - name: debug kube nginx service
      debug:
        msg: "nginx_service.rc = {{ nginx_service.rc }}"
      when: nginx_service
    - name: debug kube config file copy
      debug:
        msg: "copy remote {{ lookup('env', 'HOME') }}/.kube/config to local {{ playbook_dir }}/k3d-kube-config"
    - name: Copy kube config to local
      fetch:
        src: "{{ lookup('env', 'HOME') }}/.kube/config"
        dest: "{{ playbook_dir }}/k3d-kube-config"
        flat: yes

  handlers:
    - name: reboot pi5
      reboot:

#ansible-playbook -i hosts playbook.yml --ask-pass --ask-become-pass
