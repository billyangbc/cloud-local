apiVersion: k3d.io/v1alpha5
kind: Simple
metadata:
  name: cluster-pi5 # cluster name - will still be prefixed with `k3d-`
servers: 3 # same as `--servers 3`
agents: 5 # same as `--agents 5`
image: rancher/k3s:v1.30.1-k3s1-arm64
kubeAPI: # same as `--api-port pi-5.local:6445` (where the name would resolve to 127.0.0.1)
  host: "pi-5.local" # important for the `server` setting in the kubeconfig, for local: /etc/hosts
  hostIP: "0.0.0.0" # where the Kubernetes API will be listening on
  hostPort: "6445" # where the Kubernetes API listening port will be mapped to on your host system
ports:
  # same as `--port '8080:8080@loadbalancer'`
  - port: 8080:8080
    nodeFilters:
      - loadbalancer
  - port: 30000-30100:30000-30100
    nodeFilters:
      - server:*
env:
  - envVar: bar=baz # for testing, same as `--env 'bar=baz@server:0'`
    nodeFilters:
      - server:0
volumes: # repeatable flags are represented as YAML lists
  # attache SSD to agent 0, sync disk (backup) to agent 1, data disk to all agents
  # same as `--volume '/my/host/path:/path/in/node@server:0;agent:*'`
  - volume: /media/bill/SSD-DATA/k3dvol/01_hello:/ssd
    nodeFilters:
      - agent:0
  - volume: /media/bill/Data-4TB/k3dvol/01_hello:/data
    nodeFilters:
      - agent:*
registries:
  create:
    name: pi-5.local
    host: 0.0.0.0
    hostPort: "5000"
    volumes:
      - /var/lib/registry:/var/lib/registry # persist registry data locally
options:
  k3s: # options passed on to K3s itself
    # add disk label to node
    # k3s kubectl label nodes <node-name> foo=baz --overwrite
    nodeLabels:
      - label: disk=ssd
        nodeFilters:
          - agent:0
      - label: disk=sync
        nodeFilters:
          - agent:1
      - label: env=dev # same as `--k3s-node-label 'env=dev@agent:1'` -> this results in a kubernetes node label
        nodeFilters:
          - agent:4
    extraArgs: # additional arguments passed to the `k3s server|agent` command; same as `--k3s-arg`
      - arg: "--tls-san=192.168.100.205" # add public IP for remote access
        nodeFilters:
          - server:*
      - arg: --disable=traefik
        nodeFilters:
        - server:*
  kubeconfig:
    updateDefaultKubeconfig: true # add new cluster to your default Kubeconfig; same as `--kubeconfig-update-default` (default: true)
    switchCurrentContext: true # also set current-context to the new cluster's context; same as `--kubeconfig-switch-context` (default: true)
  runtime: # runtime (docker) specific options
    labels:
      - label: bar=baz # for testing, same as `--runtime-label 'bar=baz@agent:1'` -> this results in a runtime (docker) container label
        nodeFilters:
          - agent:1
